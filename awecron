#!/bin/bash
# Note: the code is very commented for convenience and newbies (not to annoy)

main () 
{
  # runs through all dirs that contain "tmr" file
  for t in "$repo"/*/tmr
  do
    # parentheses are needed to contain the environment inside
    (	# a bit of error prevention
      set -eu
      # gets cronjob directory
      d="${t%/*}"
      # gets the cronjob name
      name="${d##*/}"
      # compares the timer with the current epoch time
      tmr=$(stat -c "%Y" "$d/tmr")
      # gets current time by adding startup time and running time
      (( time = start + SECONDS ))
      if (( tmr <= time ))
      then
        # deletes timer file to disable the cronjob if it is broken
        rm "$d/tmr"
        # gets the cronjob configuration variables
        source "$d/cfg"
        # runs the binary with specified user and does exit code checking
          # Note: su part prevents code injection
        if su "$user" -s /bin/sh -c '"$1"' run "$d/run"
        then
          # sets the timer if exit code is 0
          ec="$?"
          touch -d "@$(( time + run ))" "$d/tmr"
          # logs events
          log "cronjob run success" "$user" "$name" "$ec"
        else
          # checks for ercode match and sets errun interval
          ec="$?" 
          if ! [[ "$ec" == "$ercode" ]] 
          then
            # logs events
            log "cronjob run failed" "$user" "$name" "$ec"
          else
            touch -d "@$(( time + errun ))" "$d/tmr" 
            # logs events
            log "cronjob error run success" "$user" "$name" "$ec"
          fi
        fi
      fi
    )
	done	
}

# dynamic sleep
ds ()
{
  # gets the soonest cronjob "next run time" in the $repo
    # Note: keep in mind that the "next run time" is stored in last modification time
  for t in "$repo"/*/tmr
  do
    # oldest last modification time == soonest cronjob "next run time"
    if [[ ! "$old" || "$t" -ot "$old" ]]
    then
      old="$t"
    fi
  done
  # checks if there is any timer file
  if [[ -n "$old" ]]
  then
    # gets the "next run time"
    next=$(stat -c "%Y" "$old")
  else
    # sets to max sleep duration if no timer file found
    delay="$max"
    return 0
  fi
  # converts "next run time" to sleep duration and applies limits if required
  ((
    delay = next - (SECONDS + start),
    delay <= max || ( delay = max ),
    delay >= min || ( delay = min )
  ))
}

# error check
ercheck()
{
  # checks that global awecron config variables are integers
  if ! [[ "$max" =~ ^[0-9]+$ && "$min" =~ ^[0-9]+$ && "$ercode" =~ ^[0-9]+$ ]]
  then
    log "some awecron global config variable is incorrectly set or does not exist" "?" "?" "1" 
    exit 1
  fi

  for t in "$repo"/*/tmr
  do
    # parentheses are needed to contain the environment inside
    ( # gets cronjob directory
      d="${t%/*}"
      # gets the cronjob name
      name="${d##*/}"
      # checks if config exists and it is a file 
      if [[ -f "$d/cfg" ]]
      then
        source "$d/cfg"
      else
        log "cronjob configuration file is missing" "$user" "$name" "1" 
        rm "$d/tmr"
        return 1
      fi
      # checks that run is executable 
      if ! [[ -x "$d/run" ]]
      then
        log "cronjob run file is missing or not executable" "$user" "$name" "1" 
        rm "$d/tmr"
        return 1
      fi
      # checks if config variables are integers
      if ! [[ "$run" =~ ^[0-9]+$ && "$errun" =~ ^[0-9]+$ ]]
      then
        log "some integer cronjob config variable is incorrectly set or does not exist" "$user" "$name" "1"
        rm "$d/tmr"
        return 1
      fi
      # checks if the user exists
      if ! id -u "$user" &> /dev/null 
      then
        log "cronjob user config variable is incorrectly set or does not exist" "$user" "$name" "1" 
        rm "$d/tmr"
        return 1
      fi
    )
  done
}

# logging formatting
log()
{
  printf "awecron (%s) {%s} [%s]: %s\n" "${2:-?}" "${3:-?}" "${4:-?}" "${1:-?}"
}


# prevents errors when there is no timer files found
shopt -s nullglob

# sets the awecron repo directory the location of awecron script
  # Note: This detection will only work if the awecron executable is located inside of the awecron repo
  # It is recommended to set a static repo location instead, for security and stability reasons
repo="${BASH_SOURCE[0]%/*}"

# checks if repo directory exists
if ! [[ -d "$repo" ]]
then
  log "awecron repo directory is incorrectly set or does not exist" "?" "?" "1" 
  exit 1
fi

# checks if global awecron config file exists and runs it
if [[ -f "$repo/cfg" ]]
then
  source "$repo/cfg"
else
  log "global awecron config file does not exist" "?" "?" "1" 
  exit 1
fi


# gets the startup time of awecron
printf -v start "%(%s)T"

# does an initial error check
  # Note: this is an optional feature that can be easily disabled by deleting the function and this function call
ercheck

while true
do
  main
  ds && sleep "$delay"
done
