#!/bin/bash
# Note: the code is very commented for convenience and newbies (not to annoy)

main () 
{
  # runs through all dirs that contain "tmr" file
  for t in "$repo"/*/tmr
  do
    # gets cronjob directory
    d=${t%/*}
    # parentheses are needed to contain variables inside
    (	# compares the timer with the current epoch time
      tmr=$(stat -c "%Y" "$d/tmr")
      # gets current time by adding startup time and running time
      (( time = start + SECONDS ))
      if (( tmr <= time ))
      then
        # deletes timer file to disable the cronjob if it is broken
        rm "$d/tmr"
        # gets the cronjob configuration variables
        source "$d/cfg"
        # runs the binary with specified user
          # Note: su part prevents code injection
        su "$user" -s /bin/sh -c '"$1"' awecronrun "$d/run" && \
          # sets the timer if exit code is 0
          ec=$? && touch -d "@$(( time + run ))" "$d/tmr" || \
          # OR checks for ercode match and sets errun interval
          ec=$? && [[ "$ec" == "$ercode" ]] && touch -d "@$(( time + errun ))" "$d/tmr" 
        # logs events
        printf "awecron %s: %s [%s]\n" "$user" "$name" "$ec"
      fi
    )
	done	
}

# dynamic sleep
ds ()
{
  # gets the soonest cronjob "next run time" in the $repo
    # Note: keep in mind that the "next run time" is stored in last modification time
  for t in "$repo"/*/tmr
  do
    # oldest last modification time == soonest cronjob "next run time"
    if [[ ! "$old" || "$t" -ot "$old" ]]
    then
      old="$t"
    fi
  done
  # checks if there is any timer file
  if [[ -n "$old" ]]
  then
    # gets the "next run time"
    next=$(stat -c "%Y" "$old")
  else
    # sets to max sleep duration if no timer file found
    delay="$max"
    return 0
  fi
  # converts "next run time" to sleep duration and applies limits if required
  ((
    delay = next - (SECONDS + start),
    delay <= max || ( delay = max ),
    delay >= min || ( delay = min )
  ))
}


# prevents errors when there is no timer files found
shopt -s nullglob

# sets the awecron repo directory the location of awecron script
  # Note: This detection will only work if the awecron executable is located inside of the awecron repo
  # It is recommended to set a static repo location instead, for security and stability reasons
repo=${BASH_SOURCE[0]%/*}

# maximum sleep duration limit
  # Note: restart awecron after modifying cronjobs to not wait until awake
max=600

# minimum sleep duration limit
min=5

# gets the startup time of awecron
printf -v start "%(%s)T"

while true
do
  main
  ds && sleep "$delay"
done
