#!/bin/sh
# Note: the code is very commented for convenience and newbies (not to annoy)

main() {
  # runs through all dirs that contain "tmr" file
  # the order does not matter because it all will be in parallel
  for t in "$repo"/*/tmr; do
    [ -e "$t" ] || continue # verify that file exists
    # parentheses are needed to contain the environment inside
    (
      # error when using unset variables
      # can't also use -e because awecron should handle errors by itself
      set -u
      # gets cronjob directory
      d="${t%/*}"
      # gets the cronjob name
      name="${d##*/}"
      # compares the timer with the current epoch time
      tmr=$(stat -c "%Y" "$d/tmr")
      time=$(awk 'BEGIN{srand(); print srand()}')
      if [ $((tmr <= time)) = 1 ]; then
        run
      fi
    ) & # uncomment to enable parallelism
  done
  wait # uncomment to enable parallelism
}

# function that actually runs a specific cronjob
run() {
  # deletes timer file to disable the cronjob if it is broken
  rm "$d/tmr"
  # gets the cronjob configuration variables
  run=$(cat "$d/cfg")
  # runs the binary in the background
  "$d/run" &
  rpid="$!"
  # spawn watchdog process for timeout
  (
    sleep "$timeout"
    # the cronjob is not trusted to properly exit
    # so if timeout is reached the cronjob will be forced to exit
    kill -9 "$rpid" >/dev/null 2>/dev/null
  ) &
  wpid=$!
  # wait for run process
  wait "$rpid"
  # save error code for later
  ec="$?"
  # stop watchdog process
  # ignore errors because wpid might not exist; there may not be a better way to handle this
  kill "$wpid" >/dev/null 2>/dev/null
  # exit code checking
  if [ "$ec" = "0" ]; then
    log "cronjob run success"
    touch -d "@$((time + run))" "$d/tmr"
  else
    log "cronjob run error"
  fi
}

# dynamic sleep
ds() {
  # gets the soonest cronjob "next run time" in the $repo
  # Note: keep in mind that the "next run time" is stored in last modification time
  for t in "$repo"/*/tmr; do
    [ -e "$t" ] || continue # verify that file exists
    # oldest last modification time == soonest cronjob "next run time"
    if [ ! "$old" ] || [ "$t" -ot "$old" ]; then
      old="$t"
    fi
  done
  # checks if there is any timer file
  if [ -n "$old" ]; then
    # gets the "next run time"
    next=$(stat -c "%Y" "$old")
  else
    # sets to max sleep duration if no timer file found
    delay="$max"
    return 0
  fi
  # converts "next run time" to sleep duration and applies limits if required
  time=$(awk 'BEGIN{srand(); print srand()}')
  delay=$((next - time))
  if [ $((delay <= max)) = 0 ]; then
    delay="$max"
  fi
  if [ $((delay >= min)) = 0 ]; then
    delay="$min"
  fi
}

# error check
ercheck() {
  # checks that global awecron config variables are integers
  # using expr with regex because of POSIX compatibility reasons
  if ! { expr "$max" : '[0-9]\+' && expr "$min" : '[0-9]\+' && expr "$timeout" : '[0-9]\+'; } >/dev/null; then
    log "some awecron global config variable is incorrectly set or does not exist"
    exit 1
  fi

  for t in "$repo"/*/tmr; do
    [ -e "$t" ] || continue # verify that file exists
    # parentheses are needed to contain the environment inside
    ( # gets cronjob directory
      d="${t%/*}"
      # gets the cronjob name
      name="${d##*/}"
      # checks if config exists and it is a file
      if [ -f "$d/cfg" ]; then
        run=$(cat "$d/cfg")
      else
        log "cronjob configuration file is missing"
        rm "$d/tmr"
        return 1
      fi
      # checks that run is executable
      if ! [ -x "$d/run" ]; then
        log "cronjob run file is missing or not executable"
        rm "$d/tmr"
        return 1
      fi
      # checks if run variable is an integer
      if ! expr "$run" : '[0-9]\+' >/dev/null; then
        log "cronjob config variable is incorrectly set or does not exist"
        rm "$d/tmr"
        return 1
      fi
    )
  done
}

# logging formatting
log() {
  printf "awecron (%s) {%s} [%s]: %s\n" "${USER:-?}" "${name:-?}" "${ec:-?}" "$1"
}

# checks if various options for storing awecron config directory exist, then sets to that location
if [ -d "$XDG_CONFIG_DIR/awecron" ]; then
  repo="$XDG_CONFIG_DIR/awecron"
elif [ -d "$HOME/.config/awecron" ]; then
  repo="$HOME/.config/awecron"
elif [ -d "/etc/awecron" ]; then
  repo="/etc/awecron"
else
  log "awecron config directory does not exist"
  exit 1
fi

# checks if global awecron config file exists and runs it
if [ -f "$repo/cfg" ]; then
  . "$repo/cfg"
else
  log "global awecron config file does not exist"
  exit 1
fi

# does an initial error check
# Note: this is an optional feature that can be easily disabled by deleting the function and this function call
ercheck

while true; do
  main
  ds && sleep "$delay"
done
